# vi编辑器的用法
## 1.vi 文件名 ，利用vi编辑一个文件，此时是命令模式，按键盘的i键进入插入模式，如果文件不存在，就会创建一个新文件
## 2. vi 文件名+2，利用vi打开一个文件，同时将光标移到第二行首
## 3. 在命令模式下，按shift+z+z 保存退出
## 4. 在命令模式下，按:wq 保存退出
## 5. :x 保存退出
## 6. :wq 文件名，相当于另存为功能
## 7. :q 在没有修改文件内容的情况下退出而不保存，如果修改了文件内容，就不能退出
## 8. :q! 强制退出而不保存
## 9. :! 命令，暂时离开vi，运行这个命令后按回车可以返回如： :! ls
## :jumps	历史编辑文档记录
## :set nu	设置行号显示
## :set nonu	取消行号显示
## :set	显示设置参数
## :set autoindent	自动缩排，回车与第一个非空格符对齐
## :syntax on/off	根据程序语法高亮显示
## :set highlight	高亮设置查看
## :set hlsearch	查找代码高亮显示
## :nohlsearch	暂时关闭高亮显示
## :set nohlsearch	永久关闭高亮显示
## :set bg=dark	设置暗色调
## :set bg=light	设置亮色调
## 10. o在下面插入一个空行
## 11.shift+o 在上面插入一个空行
## h或退格 --左移一个字符 l或空格 --右移一个字符 j --下移一行 k: --上移一行
## x --剪切(常用来删除)光标下的字符
## r --替换光标处的字符
## r	替换当前字符
## R	替换当前行及后面的字符，直到按esc为止
## s	从当前行开始，以输入的文本替代指定数目的字符
## S	删除指定数目的行，并以输入的文本替代
## ncw,nCW	修改指定数目n的字符
## nCC	修改指定数目n的行
## yy 或 Y --复制整行文本
## y0 --从光标当前位置复制到行首
## y$ --从光标当前位置复制到行尾
## p --在光标之后粘贴
## P --在光标之前粘贴
## [n]dd --删除（剪切）1(n)行
## d0 --删除（剪切）当前位置到行首的内容
## d$ 或 D --删除（剪切）当前位置到行尾的内容
## d --删除（剪切）在可视模式下选中的文本
## [n]u --取消一(n)个改动
## ctrl + r --重做最后的改动
## :earlier 4m --回到4分钟前
## gg --到文件头部
## G --到文件尾部
## H --把光标移到屏幕最顶端一行
## M --把光标移到屏幕中间一行
## L --把光标移到屏幕最底端一行
## /something --在后面的文本中查找something
## ?something --在前面的文本中查找something
## n --向后查找下一个
## N --向前查找下一个
## ctrl+w ctrl+p: 切换到前一个窗口
## ctrl+w ctrl+w: 切换到下一个窗口
## ctrl+w ctrl+r：旋转窗口的位置
## ~ --反转光标所在字符的大小写
## :!! 执行上一次的外部命令
## Vex --垂直分割,左目录右编辑窗口
## Sex --水平分割,上目录下编辑窗口
## :split(:sp) --把当前窗水平分割成两个窗口
## :split filename --水平分割窗口,并在新窗口中显示另一个文件
## :vsplit(:vsp) --把当前窗口分割成水平分布的两个窗口
## :only --只保留当前窗口,关闭其它窗口
## :set spell－开启拼写检查功能
## :set nospell－关闭拼写检查功能
## v	进入光标模式，配合移动键选中多行
## Ctrl+f	向下翻页
## Ctrl+b	向上翻页
## u	撤销上一次操作
## ``	回到上次编辑的位置
## dw	删除这个单词后面的内容
## dd	删除光标当前行
## dG	删除光标后的全部文字
## yyp	复制当前行到下一行，此复制不会放到剪切板中
## nyy	复制当前开始的n行
## p,P,.	粘贴
## ddp	当前行和下一行互换位置
# 删除命令
 
## ndw,nDW	删除光标开始及其后 n-1 个字符
## dw	删除这个单词后面的内容
## dd	删除光标当前行
## dG	删除光标后的全部文字
## d$	删除本行光标后面的内容
## d0	删除本行光标前面的内容
## ndd	删除当前行，以及其后的n-1行
## x	删除一个字符，光标后
## X	删除一个字符，光标前
## Ctrl+u	删除输入模式下的输入的文本

# 多窗口模式
## :split	创建新窗口
## Ctrl+w	切换窗口
## Ctrl-w =	所有窗口一样高
## Ctrl-w+方向键	多窗口视图切换 

# 多文件编辑
## :args	列出当前编辑的文件名
## :next	打开多文件，使用 n(Next) p(revious)	N(ext) 切换
## :file	列出当前打开的所有文件

# 复制粘贴取消缩进
## :set paste

# vim 缩进
Normal Mode下，命令>>将对当前行增加缩进，而命令<<则将对当前行减少缩进
在命令前使用数字，来指定命令作用的范围

5<<
在Insert/Replace Mode下

Ctrl-Shift-t可以增加当前行的缩进
Ctrl-Shift-d则可以减少当前行的缩进
使用0-Ctrl-Shift-d命令，将移除所有缩进

需要注意的是，当我们输入命令中的“0”时，Vim会认为我们要在文本中插入一个0，并在屏幕上显示输入的“0”；然后当我们执行命令0-Ctrl-Shift-d时，Vim就会意识到我们要做的是减少缩进，
这时0会就会从屏幕上消失
# vim tab缩进
tab缩进宽度默认为8个空格

我们可以使用以下命令，来修改缩进宽度

:set tabstop=4
:set softtabstop=4
:set shiftwidth=4
:set expandtab
tabstop:表示一个 tab 显示出来是多少个空格的长度默认 8

softtabstop:表示在编辑模式的时候按退格键的时候退回缩进的长度当使用 expandtab 时特别有用。

shiftwidth:表示每一级缩进的长度一般设置成跟 softtabstop 一样。 当设置成 expandtab 时缩进用空格来表示noexpandtab 则是用制表符表示一个缩进

expandtab选项，用来控制是否将Tab转换为空格,但是这个选项并不会改变已经存在的文本，如果需要应用此设置将所有Tab转换为空格，需要执行

:retab!

 # vim 自动缩进
cindent
:set cindent
vim可以很好的识别出C和Java等结构化程序设计语言，并且能用C语言的缩进格式来处理程序的缩进结构

smartindent
:set smartindent
在这种缩进模式中，每一行都和前一行有相同的缩进量，同时这种缩进形式能正确的识别出花括号，当遇到右花括号（}），则取消缩进形式。此外还增加了识别C语言关键字的功能。如果一行是以#开头的，那么这种格式将会被特殊对待而不采用缩进格式。

autoindent
:set autoindent
在这种缩进形式中，新增加的行和前一行使用相同的缩进形式

 
